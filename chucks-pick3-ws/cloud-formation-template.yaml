AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Chucks Pick 3 AWS Serverless Spring API
Outputs:
  AwsApiGatewaySampleApi:
    Description: Root URL for application
    Export:
      Name: AwsApiGatewaySampleApi
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
Resources:
  ChucksPick3VpcExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: "ChucksPick3 VPC Execution Role"
      Path: "/"
      ManagedPolicyArns: [
        "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
      ]
      RoleName: "chucks-pick3-vpc-role"
      Tags:
        - Key: Name
          Value: ChucksPick3VpcExecutionRole
  ChucksPick3RdsVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: ChucksPick3RdsVpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ChucksPick3RdsVpc
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: "us-east-2a"
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ChucksPick3RdsVpc
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: "us-east-2b"
      Tags:
        - Key: Name
          Value: PrivateSubnet2
  RdsDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      Tags:
        - Key: Name
          Value: RdsDBSubnetGroup
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow RDS Connections
      VpcId:
        Ref: ChucksPick3RdsVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 192.168.0.0/16
      #SecurityGroupEgress:
      #  - IpProtocol: tcp
      #    FromPort: 80
      #    ToPort: 80
      #    CidrIp: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: RDSSecurityGroup
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow RDS Connections
      VpcId:
        Ref: ChucksPick3RdsVpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: LambdaSecurityGroup
  RdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: ChucksPick3Rds
      DBName: chuckspick3db
      DBSubnetGroupName:
        Ref: RdsDBSubnetGroup
      Engine: MySQL
      EngineVersion: 5.7.22
      MasterUsername: chuckspick3
      MasterUserPassword: chuckspick3
      MultiAZ: false
      Port: 3306
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: ChucksPick3Rds
      VPCSecurityGroups:
        - Ref: RdsSecurityGroup
  AwsApiGatewaySampleFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - ChucksPick3VpcExecutionRole
    Properties:
      CodeUri: s3://${bytepushers.deploy.s3BucketName}/${bytepushers.deploy.s3ObjectName}
      Description: Chucks Pick 3 AWS Serverless Spring API
      FunctionName: ${bytepushers.deploy.lambdaFunctionName}
      Events:
        GetResource:
          Properties:
            Method: any
            Path: /{proxy+}
          Type: Api
      Handler: software.bytepushers.pick3.StreamLambdaHandler::handleRequest
      MemorySize: 1024
      Role:
        Fn::GetAtt: [ ChucksPick3VpcExecutionRole, Arn ]
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - '*'
      Runtime: java11
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2